name: Deploy Spring Boot + React to EC2

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build Spring Boot backend
        working-directory: ./BuDongSan
        run: ./gradlew build -x test

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      # .env.production 생성 (프론트 빌드용)
      - name: Generate .env.production
        working-directory: ./frontend
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" > .env.production
          echo "VITE_KAKAO_JS_API_KEY=${{ secrets.KAKAO_JS_API_KEY }}" >> .env.production

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      # dist 산출물만 배포용 디렉터리로 복사
      - name: Prepare frontend output for deployment
        run: |
          rm -rf frontend_output
          mkdir -p frontend_output
          cp -r frontend/dist/* frontend_output/

      - name: Check frontend output content
        run: ls -al frontend_output

      # EC2에 배포 경로 준비 (포트 2222)
      - name: Prepare dirs on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 2222
          script: |
            mkdir -p /home/ubuntu/Room91
            mkdir -p /home/ubuntu/Room91/frontend

      # .env.production 파일 서버에 보관
      - name: Send .env.production to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 2222
          source: "frontend/.env.production"
          target: /home/ubuntu/Room91/frontend
          strip_components: 1

      # 프론트엔드 산출물 배포 (포트 2222)
      - name: Deploy frontend files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 2222
          source: "frontend_output/*"
          target: /home/ubuntu/Room91/frontend
          strip_components: 1

      # 백엔드 .env 생성
      - name: Create backend .env file
        run: |
          echo "${{ secrets.ENV_PROD }}" > .env

      # 백엔드 .env 전송 (포트 2222)
      - name: Send backend .env to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 2222
          source: ".env"
          target: /home/ubuntu/Room91

      # 백엔드 JAR 전송 (와일드카드)
      - name: Copy backend jar to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 2222
          source: "BuDongSan/build/libs/*SNAPSHOT.jar"
          target: /home/ubuntu/Room91

      # 서비스 재시작 (docker-compose/compose 둘 다 대응, 포트 2222)
      - name: Restart services on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 2222
          script: |
            set -e
            cd /home/ubuntu/Room91
            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              DC="docker compose"
            fi
            $DC down || true
            # 전체 재빌드/재기동
            $DC up -d --build